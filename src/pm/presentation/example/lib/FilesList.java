/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package pm.presentation.example.lib;

import java.util.List;
import java.io.IOException;
import java.nio.file.DirectoryIteratorException;
import java.nio.file.DirectoryStream;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import pm.entitymanager.logic.*;
import pm.entitymanager.logic.file.*;
/**
 *
 * @author user
 */
public class FilesList extends JList {
    private final DefaultListModel listModel = new DefaultListModel();
    /**
     * Creates new form FilesList
     */
    public FilesList() {
        initComponents();
    }
    public FilesList(Path dir)  {
        loadDirContents(dir);
        setModel(listModel);
        initComponents();
    }
    public final void loadDirContents(Path dir) //final ⇔ not overridable
    {
       // EntityInterface facade = new FileLogicFacade();
        FileLogicFacade s = null;
        try {
            s = new FileLogicFacade();
        } catch (IOException ex) {
            Logger.getLogger(FilesList.class.getName()).log(Level.SEVERE, null, ex);
        }
        EntityInterface rootfs;
        rootfs = s.getRootEntity();
        String name;
        name = s.getEntityName(rootfs);
        System.out.println(name);
        List<AbstractFile> files;
        files = (List<AbstractFile>) s.getAllChildren(rootfs);

        listModel.removeAllElements();
                if (dir == null) // root
        {
// add file-systems to list
            Iterable<Path> fileSystems
                    = FileSystems.getDefault().getRootDirectories();
            for (Path aPath : fileSystems) {
                listModel.addElement((Path) aPath);
            }
        } else {
// add dir contents to list
            try (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {
                for (Path rfile : stream) {
                    listModel.addElement((Path) rfile);
                }
            } catch (IOException | DirectoryIteratorException x) {
                /* Η εξαίρεση IOException
                 δεν προέρχεται σε καμ ιά περίπτωση από την επανάληψη. Στο παρόν
                 παράδειγμ α, μ πορεί να προέρθει από τη μ έθοδο newDirectoryStream. */
                System.err.println(x);
            }
        }
      //  listModel.addElement(files);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
